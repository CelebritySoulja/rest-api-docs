FORMAT: 1A
HOST: https://dashboard.konekt.io

# Konekt

# Available APIs
We have two public APIs, one that is a *REST API* and one that is a *low-level TCP/IP socket service API*.

## *REST API* Features
Our REST API provides access to the following features:
- Device Management
- Incoming & Outgoing SMS
- Cloud features

## *TCP/IP Socket Service API* Features 
Our low-level TCP/IP socket service API is how devices interact with our platform and provides access to the folowing features:
- Outgoing SMS
- Cloud features

# Other Documentation Available

We currently have two primary types of documentation:
- REST API Documentation _(this document)_
- Cloud User & API Documentation: https://content.konekt.io/docs/konekt-cloud/

# Group Authentication
Every REST API call is authenticated against either a **supplied user/password**, a **supplied pre-shared apikey**, a **supplied temporary session sesskey**, or a temporary **cookie-based session**. The Authentication group of API calls serves the purpose of establishing/managing sessions and their corresponding sesskey (used in cross-domain settings and special-use scenarios where cookie-based sessions for any reason cannot be used).

Note: An alternative to session-based authentication exists, which requires authentication on every API call. Please contact us if you are in need of this capability for your application.

## Session Creation [/api/1/auth/session]
### Create a new session using user/password authentication [POST]
Both **email** and **password** form fields must be supplied with values in the POST body.

Cookie-based session information will be returned upon successful session creation, as well as an object that represents information about the user account and session.

(For cross-domain or other applications that are for any reason unable to utilize the cookie, a temporary `sesskey` string is provided in the returned object that can be supplied as either a GET or POST variable for authorization when calling subsequent API calls.)

Note: Sessions automatically time out after extended periods of inactivity.

+ Request (application/x-www-form-urlencoded)

    email=someone@example.com&password=joepassword

+ Response 200 (application/json)

    {
      "success": true,
      "data": {
        "sesskey": "somesessionkeystring",
        "userid": 123,
        "email": "someone@example.com",
        "first": "someFirstName",
        "last": "someLastName",
        "role": "somerole",
        "has_password": 1,
        "partnerid": 1
      }
    }

## Session Destruction and Logout [/api/1/auth/sessiondestroy]
### Destroy a cookie-based session without supplying sesskey [POST]

+ Response 200 (application/json)

        {
            "success": true,
            "data": null
        }

### Destroy a session by supplying sesskey [POST]
+ Request (application/x-www-form-urlencoded)

        sesskey=somesessionkeystring

+ Response 200 (application/json)

        {
            "success": true,
            "data": null
        }

# Group Users

## User Accounts [/api/1/users/{?email}]
Our API provides optional user management and authentication for partners that wish to utilize our built-in access control.

### List users [GET]
All fields supplied in the request are optional and are supported for filtering results.
+ Parameters
    + email (optional, string, `joe@example.com`)
        email address filter for searching users list

+ Request (application/x-www-form-urlencoded)

        email=joe@example.com

+ Response 200 (application/json)

        {
          "success": true,
          "data": [
            {
                "id":"42",
                "email":"joe@example.com",
                "partnerid":"12",
                "first":"Joe",
                "last":"Example",
                "role":"",
                "registered":"2014-05-30 20:41:28",
                "billingmethod":"1"
            }          
          ]
        }

### Create a new user [POST]

+ Request (application/x-www-form-urlencoded)

        TBC

+ Response 200 (application/json)

        {
          "success": true,
          "data": []
        }

## Individual User Account Details [/api/1/users/{userid}]
Either a numerical userid or the keyword `me` must be supplied in the request URI.
+ Parameters
    + userid (required, number, `42`)
        id of the user record to retrieve
        + Values
            + `me`
            + `42`
            
### Retrieve individual user account information [GET]

+ Response 200 (application/json)

        {
          "success": true,
          "data": {
                "id":"42",
                "email":"joe@example.com",
                "partnerid":"12",
                "first":"Joe",
                "last":"Example",
                "role":"",
                "registered":"2014-05-30 20:41:28",
                "billingmethod":"1"
            }
        }

## Individual User Billing and Credit Card Details [/api/1/users/{userid}/billing]
Either a numerical userid or the keyword `me` must be supplied in the request URI.
+ Parameters
    + userid (required, number, `42`)
        id of the user whose billing details to retrieve
        + Values
            + `me`
            + `42`
            
### Retrieve individual user billing information [GET]

+ Response 200 (application/json)

        {
          "success": true,
          "data": {
            "id":"42",
            "billingmethod":"1",
            "cardset":true,
            "card":{
                    "last4":"9876",
                    "issuer":"MasterCard",
                    "expirationmonth":1,
                    "expirationyear":2018,
                    "country":"United States of America",
                    "name":"Joe Example",
                    "address1":"1 Beverly Way",
                    "address2":"","city":"Beverly Hills",
                    "state":"CA",
                    "zip":"90210",
                    "cvccheck":"pass",
                    "addresscheck":"fail",
                    "zipcheck":"pass"
                }
            }
        }

### Update individual user billing information [POST]
+ Request (application/x-www-form-urlencoded)

        TBC

+ Response 200 (application/json)

        {
          "success": true,
          "data": {}
        }

## Individual User Billing Recent Charges [/api/1/users/{userid}/charges]
Either a numerical userid or the keyword `me` must be supplied in the request URI.

+ Parameters
    + userid (required, number, `42`)
        id of the user whose recent charges to retrieve
        + Values
            + `me`
            + `42`

### Retrieve individual user billing recent charges [GET]

+ Response 200 (application/json)

        {
          "success": true,
          "data": {
                "id":"43",
                "billingmethod":"1",
                "charges":[
                    {
                        "date":"2015-01-22",
                        "amount":5,
                        "description":"Charge for Order 91",
                        "succeeded":true,
                        "message":"",
                        "refunded":false,
                        "refund":0,
                        "type":"MasterCard",
                        "last4":"9876"
                    },
                    {
                        "date":"2015-01-22",
                        "amount":5,
                        "description":"Charge for Order 89",
                        "succeeded":false,
                        "message":"Your card was declined.",
                        "refunded":false,
                        "refund":0,"type":"MasterCard",
                        "last4":"9876"
                    },
                    {
                        "date":"2014-08-21",
                        "amount":8,
                        "description":"Charge for Order 32",
                        "succeeded":true,
                        "message":"",
                        "refunded":true,
                        "refund":8,
                        "type":"MasterCard",
                        "last4":"9876"
                    }
                ]
            }
        }

## Individual User Recent API Activity [/api/1/users/{userid}/activity]
Either a numerical userid or the keyword `me` must be supplied in the request URI.
+ Parameters
    + userid (required, number, `42`)
        id of the user whose recent charges to retrieve
        + Values
            + `me`
            + `42`

### Retrieve individual user recent API activity [GET]

+ Response 200 (application/json)

        {
          "success": true,
          "data": {
            "id":42,
            "events":[
                {
                    "eventid":"20253",
                    "timestamp":"2015-02-04 01:17:23",
                    "description":"1\/users\/me\/activity",
                    "method":"GET",
                    "sent":""
                },
                {
                    "eventid":"20252",
                    "timestamp":"2015-02-04 01:10:05",
                    "description":"1\/users\/me\/charges",
                    "method":"GET",
                    "sent":""
                },
                {
                    "eventid":"20251",
                    "timestamp":"2015-02-04 01:07:05",
                    "description":"1\/users\/me\/billing",
                    "method":"POST",
                    "sent":"MASKED"
                }
            ]
        }

# Group Device Data Plans

## Device Data Plans [/api/1/plans/]

### List plans [GET]
All fields supplied in the request are optional and are supported for filtering results.

+ Request (application/x-www-form-urlencoded)

        TBC

+ Response 200 (application/json)

        {
            "success":true,
            "data":[
                {
                    "id":73,
                    "partnerid":12,
                    "name":"1MB",
                    "description":"1 MB of data per month",
                    "data":1000000,
                    "recurring":1,
                    "enabled":1,
                    "amount1":3,
                    "amount2":4,
                    "amount3":5,
                    "amount4":6,
                    "amount5":7,
                    "billingperiod":1,
                    "overage1":0.1,
                    "overage2":0.2,
                    "overage3":0.3,
                    "overage4":0.4,
                    "overage5":0.5,
                    "sms1":0.2,
                    "sms2":0.3,
                    "sms3":0.4,
                    "sms4":0.5,
                    "sms5":0.65,
                    "trialdays":30,
                    "templateid":13,
                    "carrierid":2,
                    "groupid":0
                },
                {
                    "id": 79,
                    "partnerid": 1,
                    "name": "PAYG",
                    "description": "",
                    "data": 0,
                    "recurring": 1,
                    "enabled": 1,
                    "amount1": "0.40",
                    "amount2": "0.40",
                    "amount3": "-1.00",
                    "amount4": "-1.00",
                    "amount5": "-1.00",
                    "billingperiod": 1,
                    "overage1": "0.60",
                    "overage2": "0.85",
                    "overage3": "-1.00",
                    "overage4": "-1.00",
                    "overage5": "-1.00",
                    "sms1": "0.19",
                    "sms2": "0.30",
                    "sms3": "-1.00",
                    "sms4": "-1.00",
                    "sms5": "-1.00",
                    "trialdays": 0,
                    "templateid": 0,
                    "carrierid": 3,
                    "groupid": 0
                },
                {
                    "id": 77,
                    "partnerid": 1,
                    "name": "1 MB + 30-day Free Trial",
                    "description": "",
                    "data": 1000000,
                    "recurring": 1,
                    "enabled": 1,
                    "amount1": "0.97",
                    "amount2": "1.19",
                    "amount3": "-1.00",
                    "amount4": "-1.00",
                    "amount5": "-1.00",
                    "billingperiod": 1,
                    "overage1": "1.00",
                    "overage2": "1.00",
                    "overage3": "0.00",
                    "overage4": "0.00",
                    "overage5": "0.00",
                    "sms1": "0.19",
                    "sms2": "0.19",
                    "sms3": "-1.00",
                    "sms4": "-1.00",
                    "sms5": "-1.00",
                    "trialdays": 30,
                    "templateid": 0,
                    "carrierid": 3,
                    "groupid": 0
                },
            ]
        }

## Individual Device Data Plan Details [/api/1/devices/{planid}]
A numerical plan ID must be supplied in the request URI.
+ Parameters
    + planid (required, number, `73`)
        id of the device data plan whose details to retrieve

### Retrieve individual device data plan details [GET]

+ Response 200 (application/json)

        {
            "success":true,
            "data": {
                "id":73,
                "partnerid":12,
                "name":"1MB",
                "description":"1 MB of data per month",
                "data":1000000,
                "recurring":1,
                "enabled":1,
                "amount1":3,
                "amount2":4,
                "amount3":5,
                "amount4":6,
                "amount5":7,
                "billingperiod":1,
                "overage1":0.1,
                "overage2":0.2,
                "overage3":0.3,
                "overage4":0.4,
                "overage5":0.5,
                "sms1":0.2,
                "sms2":0.3,
                "sms3":0.4,
                "sms4":0.5,
                "sms5":0.65,
                "trialdays":30,
                "templateid":13,
                "carrierid": 3,
                "groupid": 0
            }
        }


# Group Devices

## Devices [/api/1/devices/{?userid|sim|phone|name}]

### List devices [GET]
All fields supplied in the request are optional and are supported for filtering results.
+ Parameters
    + userid (optional, number, `42` )
        id of the user whose devices' information to retrieve (the `me` keyword is not supported)
        (Note that for normal users, they will only see their devices by default and can leave this off)
    + sim (optional, number, `99999900000000123` )
        Only show device that has attached SIM with given number
    + phone (optional, string, `+17735550101` )
        Only show device that has the given phone number assigned to it
    + name (optional, string, `Test Device` )
        Filter devices based on name



+ Response 200 (application/json)

        {
            "success": true,
            "data": [
            {
                "id": 156,
                "userid": 458,
                "name": "Unnamed Device (25888)",
                "whencreated": "2015-06-10 00:15:54",
                "phonenumber": "",
                "tags": [],
                "links": {
                    "cellular": [
                        {
                            "id": 1234,
                            "sim": "99990000000012345678",
                            "imsi": 000000001234567,
                            "carrierid": 2,
                            "dataplansubscriptionid": 75,
                            "databonusplansubscriptionid": 0,
                            "tier": 1,
                            "whenclaimed": "2015-06-10 00:15:54",
                            "whenexpires": "2015-07-10 00:15:54",
                            "cur_billing_data_used": "1187150",
                            "apn": "apn.konekt.io (no user, no pw)",
                            "state": "LIVE",
                            "overagelimit": -1
                        }
                    ]
                }
            },
            {
                "id": 80,
                "userid": 477,
                "name": "Unnamed Device",
                "type": "Unknown",
                "whencreated": "2016-04-26 18:42:55",
                "phonenumber": "",
                "tags": [],
                "links": {
                    "cellular": []
                }
            },
            {
                "id": 79,
                "userid": 477,
                "name": "Unnamed Device",
                "type": "Unknown",
                "whencreated": "2016-04-26 18:42:11",
                "phonenumber": "",
                "tags": [],
                "links": {
                    "cellular": []
                }
            },
            {
                "id": 78,
                "userid": 477,
                "name": "Unnamed Device",
                "type": "Unknown",
                "whencreated": "2016-04-26 18:42:08",
                "phonenumber": "",
                "tags": [],
                "links": {
                    "cellular": []
                }
            },
            {
                "id": 77,
                "userid": 477,
                "name": "Unnamed Device",
                "type": "Unknown",
                "whencreated": "2016-04-18 17:49:29",
                "phonenumber": "",
                "tags": [],
                "links": {
                    "cellular": []
                }
            }
        ]
        }

## Individual Device Details [/api/1/devices/{deviceid}]
A numerical device ID must be supplied in the request URI.
+ Parameters
    + deviceid (required, number, `1234`)
        id of the device whose details to retrieve

### Retrieve individual device information [GET]

+ Response 200 (application/json)

        {
            "success": true,
            "data": {
                "id": 156,
                "userid": 458,
                "name": "Unnamed Device (25888)",
                "whencreated": "2015-06-10 00:15:54",
                "phonenumber": "",
                "tags": [],
                "links": {
                    "cellular": [
                        {
                            "id": 1234,
                            "sim": "99990000000012345678",
                            "imsi": 000000001234567,
                            "carrierid": 2,
                            "dataplansubscriptionid": 75,
                            "databonusplansubscriptionid": 0,
                            "tier": 1,
                            "whenclaimed": "2015-06-10 00:15:54",
                            "whenexpires": "2015-07-10 00:15:54",
                            "cur_billing_data_used": "1187150",
                            "apn": "apn.konekt.io (no user, no pw)",
                            "state": "LIVE",
                            "overagelimit": -1
                        }
                    ]
                }
            }
        }


## Device Claiming and Activation [/api/1/links/cellular/sim_{simnumber}/claim]
A numerical SIM number (located on the physical SIM card) must be supplied in the request URI.
+ Parameters
    + simnumber (required, number, `99990000000012345678`)
        number located on the SIM card that specifies the SIM card to activate

### Claim ownership of and activate an individual device [POST]
Note: This action cannot be completed without first having valid billing information on file for the device owner.

Both **plan** and **tier** form fields must be supplied with values in the POST body. The value supplied for the plan field should be a planid (see: Device Data Plans).  The value for the tier field should be in the range from between 1 and 5 (inclusive), and represents which geographic regions (Tiers 1 through 5, respectively) within which the device will be allowed to be used. Higher tier values incur higher costs.

+ Request (application/x-www-form-urlencoded)

        plan=73&tier=1

+ Response 200 (application/json)

        {
          "success": true,
          "data": {
            "id": 1234,
            "sim": "99990000000012345678"
          }
        }

## Device Phone Numbers [/api/1/devices/{deviceid}/addnumber?{preview}]
A numerical device ID must be supplied in the request URI.
+ Parameters
    + deviceid (required, number, `1234`)
        id of the device whose phone number to view or modify
    + preview (optional, number, `1`)
        if set to `1` and supplied, will return cost (if any) of performing the operation WITHOUT actually performing i

### Purchase and Assign Phone Number to Device [POST]
Note: This action cannot be completed without first having valid billing information on file for the authenticated user account.

The following form fields are required in the POST body: 
- **country** (string, required, two-letter country code for the phone number)

The following form fields are optional in the POST body and are only applicable to phone numbers in the US/Canada: 
- **areacode** (number, optional, area code to search in for phone number)

On success, the response includes the following fields:
- **order_data** (object, contains data regarding the activation of the phone number.)
- **preview** (bool, true if it is in preview mode)
- **sku** (string, sku of the product)
- **unit_cost** (number, unit cost of ordered product)
- **total_cost** (number, total cost of ordered product)
- **description** (string, description of ordered product)
- **extra_description** (string, extra description of ordered product)
- **needs_shipping** (bool, true if product needs shipping)
- **shipping_cost** (number, shipping cost)
- **sales_tax** (number, sales tax for ordered product)

+ Request (application/x-www-form-urlencoded)

        country=US&areacode=703

+ Response 200 (application/json)

   {
     "success": true,
     "data": null,
     "order_data": {
       "preview": true,
       "sku": "NUM",
       "unit_cost": "1.00",
       "total_cost": "1.00",
       "description": "Phone number activation (US)",
       "extra_description": "",
       "needs_shipping": false,
       "shipping_cost": 0,
       "sales_tax": 0
     }
   }
    
## Device Ordering [/api/1/orders/]

### Place a Device Order [POST]
Note: This action cannot be completed without first having valid billing information on file for the authenticated user account.

+ Parameters
    + preview (optional, number, `1`)
        if set to `1` and supplied, will return cost (if any) of performing the operation WITHOUT actually performing it. This will not result in an actual order, which can be helpful if you're getting accustomed to the API and testing out your application.

The following form fields are required in the POST body: 
- **productid** (number, required, must be greater than 0)
- **optionid** (number, required if productid has options, must be greater than 0)

The following form fields are optional in the POST body: 
- **shipping** (object, optional, contains the recipient name, address etc. for the particular order)
- **name** (string, optional, recipient name)
- **line1** (string, optional, line 1 of shipping address)
- **city** (string, optional)
- **state** (string, optional)
- **country** (string, optional)
- **zip** (number, optional)
- **telephone** (number, optional)

On success, the response includes the following fields: 
- **order_data** (object, order data)
- **preview** (bool, if API call is in preview mode)
- **sku** (string, the sku of the product)
- **unit_cost** (number, the unit cost of the ordered product)
- **discount** (number, the discount applied to the ordered product)
- **total_cost** (number, the total cost of the ordered product)
- **description** (string, product description)
- **extra_description** (string, extra product description)
- **quantity** (number, quantity ordered)
- **preorder_details** (string, preorder details)
- **needs_shipping** (bool, true if product requires shipping)
- **free_shipping** (bool, true if shipping is free)
- **shipping_cost** (number, shipping cost)
- **sales_tax** (number, sales tax applied)

+ Request (application/json)

    {
        "productid":1,
        "optionid":1,
        "shipping" : {
            "name" : "someName",
            "line1" : "something W Illinois St",
            "city" : "Chicago",
            "state" : "IL",
            "country" : "US",
            "zip" : "60654",
            "telephone" : "1234567890"
        }
 
    }

+ Response 200 (application/json)
    
    {
      "success": true,
      "data": null,
      "order_data": {
        "preview": true,
        "sku": "SIM-N2-2FF3FF",
        "unit_cost": 5,
        "discount": 0,
        "total_cost": 5,
        "description": "SIM Card",
        "extra_description": "Global SIM Card[Combo Mini/Micro SIM]",
        "quantity": 1,
        "preorder_details": "",
        "needs_shipping": true,
        "free_shipping": false,
        "shipping_cost": 5.85,
        "sales_tax": 1.11
      }
    }

# Group SMS

## Incoming SMS to Device [/api/1/sms/incoming]
Device-terminated SMS (DT SMS), also known as mobile-terminated SMS (MT SMS), refers to Short Messaging Service messages sent to devices.

### Send an SMS to a Device [POST]
Note: This action cannot be completed without first having valid billing information on file for the authenticated user account.

Circuit-switched DT SMS is only possible with cellular devices. Currently, only circuit-switched SMS is supported for DT SMS (DT SMS-over-IP is planned for support in the future).

Note: All telephone numbers are specified using E.164 formatting.

One of the following form fields are required in the POST body to identify the recipient device (only one of the following fields may be supplied): 
- **deviceid** (number, required, id of the recipient device)
- **phonenumber** (string, required, phone number of the recipient device if the device has already been assigned a phone number)
- **deviceids** (array of deviceid entries, used for sending SMS to multiple devices simultaneously)

One of the following form fields are required in the POST body to provide the contents of the message (only one of these fields may be included): 
- **body** (string, required, ASCII text representation of the SMS body)
- **base64body** (string, required, a base64-encoded representation of the SMS body)

+ Request (application/x-www-form-urlencoded)

        deviceid=1234&body=Hello%20World!

+ Response 200 (application/json)

        {
          "success": true,
          "data": null
        }

+ Request (application/x-www-form-urlencoded)

        deviceids[]=1234&deviceids[]=1235&deviceids[]=1236&body=Hello%20World!

+ Response 200 (application/json)

        {
          "success": true,
          "data": null
        }

## Outgoing SMS to Mobile Phone Number [/api/1/sms/outgoing]
Our platform enables outgoing SMS from either a device or from a web application.

For applications involving devices: Device-originated SMS (DO SMS), also known as mobile-originated SMS (MO SMS), refers to Short Messaging Service messages sent from devices to mobile telephone numbers anywhere in the world. We support DO SMS via our REST API (as described in this section), as well as SMS-over-IP via a low-level TCP/IP socket interface.

Note: All telephone numbers are specified using E.164 formatting.

### Send an SMS to a Mobile Telephone Number [POST]
Note: This action cannot be completed without first having valid billing information on file for the authenticated user account AND having purchased and assigned a phone number to a device.

One of the following form fields are required in the POST body to identify the source device (only one of the following fields may be supplied): 
- **deviceid** (number, required, id of the source device)
- **phonenumber** (string, required, phone number of the source device if the device has already been assigned a phone number)

The following form fields are required in the POST body to identify the destination device (only one of the following fields may be supplied): 
- **destinationphonenumber** (string, required, phone number of the recipient device)

One of the following form fields are required in the POST body to provide the contents of the message (only one of these fields may be included): 
- **body** (string, required, ASCII text representation of the SMS body)
- **base64body** (string, required, a base64-encoded representation of the SMS body)

+ Request (application/x-www-form-urlencoded)

        deviceid=1234&destinationphonenumber=%2B15555551212body=Hello%20World!

+ Response 200 (application/json)

        {
          "success": true,
          "data": null
        }

# Group Cloud Services Router

## CSR RDM [/api/1/csr/rdm/{recordid}]

+ Parameters
    + recordid (optional, number, `13`)
        Will only return the result that matches the record id if it is supplied. 

### Retrieve RDM [GET]

The following form fields are optional in the POST body: 


On success, the response includes the following fields: 
- **data** (list of objects, data)
- **id** (number, rdm id) 
- **logged** (string, the date at which it was logged)
- **deviceid** (number, device id)
- **data** (string, data stored)
- **tags** (list of tags, list of tags associated with the rdm)


+ Response 200 (application/json)

    {
      "success": true,
      "continues": false,
      "data": [
        {
          "id": 14,
          "logged": "2015-04-09 15:59:59",
          "deviceid": 77,
          "data": "{\"source\":\"somesource\",\"tags\":[\"TestXYZ\",\"TestB\"],\"data\":\"dGVzdGRhdGEx\"}",
          "record_id": "8e274992-cf84-11e5-a67e-bc764e20b516",
          "tags": [
            "TestB",
            "TestXYZ"
          ]
        },
        {
          "id": 13,
          "logged": "2015-04-08 21:05:42",
          "deviceid": 1,
          "data": "{\"source\":\"somesource\",\"tags\":[\"TestXYZ\",\"TestD\"],\"data\":\"dGVzdGRhdGEx\"}",
          "record_id": "8e2748e7-cf84-11e5-a67e-bc764e20b516",
          "tags": [
            "TestD",
            "TestXYZ"
          ]
        },
        {
          "id": 12,
          "logged": "2015-04-08 21:03:22",
          "deviceid": 1,
          "data": "{\"source\":\"somesource\",\"tags\":[\"TestXYZ\",\"TestD\"],\"data\":\"dGVzdGRhdGEx\"}",
          "record_id": "8e274838-cf84-11e5-a67e-bc764e20b516",
          "tags": [
            "TestXYZ",
            "TestD"
          ]
        },
        {
          "id": 10,
          "logged": "2015-04-07 22:05:02",
          "deviceid": 1,
          "data": "{\"source\":\"somesource\",\"tags\":[\"TestA\",\"TestE\"],\"data\":\"dGVzdGRhdGEx\"}",
          "record_id": "8e274787-cf84-11e5-a67e-bc764e20b516",
          "tags": [
            "TestA",
            "TestE"
          ]
        },
        {
          "id": 9,
          "logged": "2015-04-07 22:04:30",
          "deviceid": 1,
          "data": "{\"source\":\"somesource\",\"tags\":[\"TestA\",\"TestD\"],\"data\":\"dGVzdGRhdGEx\"}",
          "record_id": "8e2746c9-cf84-11e5-a67e-bc764e20b516",
          "tags": [
            "TestA",
            "TestD"
          ]
        },
        {
          "id": 8,
          "logged": "2015-04-07 21:36:35",
          "deviceid": 1,
          "data": "{\"source\":\"somesource\",\"tags\":[\"TestA\",\"TestD\"],\"data\":\"dGVzdGRhdGEx\"}",
          "record_id": "8e274607-cf84-11e5-a67e-bc764e20b516",
          "tags": [
            "TestA",
            "TestD"
          ]
        },
        {
          "id": 5,
          "logged": "2015-03-19 18:08:45",
          "deviceid": 1,
          "data": "{\"source\":\"asdf\",\"tags\":[],\"data\":\"VGVzdGluZw==\"}",
          "record_id": "8e2744d4-cf84-11e5-a67e-bc764e20b516",
          "tags": []
        },
        {
          "id": 4,
          "logged": "2015-03-19 18:08:45",
          "deviceid": 1,
          "data": "{\"source\":\"asdf\",\"tags\":[],\"data\":\"VGVzdGluZw==\"}",
          "record_id": "8e274336-cf84-11e5-a67e-bc764e20b516",
          "tags": []
        }
      ]
    }

### Create Device Data [POST]




## CSR Tags [/api/1/csr/tags]

### List CSR Tags [GET]

+ Response 200 (application/json)
    {
      "success": true,
      "data": [
        "Tag100",
        "Tag200",
        "Tag2001",
        "Test1",
        "Test2",
        "TestA",
        "TestB",
        "TestD",
        "TestE",
        "TestXYZ"
      ]
    }

## CSR Apps [/api/1/csr/apps]

### List CSR Apps [GET]

+ Response 200 (application/json)

    {
      "success": true,
      "data": [
        {
          "id": 1,
          "partnerid": 0,
          "name": "Email",
          "description": "Send an email containing the CSR JSON object",
          "userpropertieslist": [
            {
              "property": "recipients",
              "name": "Email recipients",
              "description": "Comma-separated list of email addresses",
              "mandatory": true
            },
            {
              "property": "subject",
              "name": "Subject",
              "description": "Email subject",
              "mandatory": true
            }
          ]
        }
      ]
    }


### Retrieve single CSR App by id [GET]

+ Parameters
  + id (required, number, `1`)
    Will only return the result that matches the app id if it is supplied. 

+ Response 200 (application/json)

  {
    "success": true,
    "data": {
      "id": 1,
      "partnerid": 0,
      "name": "Email",
      "description": "Send an email containing the CSR JSON object",
      "userpropertieslist": [
        {
          "property": "recipients",
          "name": "Email recipients",
          "description": "Comma-separated list of email addresses",
          "mandatory": true
        },
        {
          "property": "subject",
          "name": "Subject",
          "description": "Email subject",
          "mandatory": true
        }
      ]
    }
  }


## CSR Sources [/api/1/sources/]


### List CSR Sources [GET]

+ Response 200 (application/json)

    {
      "success": true,
      "data": [
        {
          "id": 12,
          "userid": 395,
          "deviceid": 46,
          "sharedkey": 945112124,
          "sharedid": 1631022658
        },
        {
          "id": 11,
          "userid": 395,
          "deviceid": 46,
          "sharedkey": 1266043705,
          "sharedid": 1464682875
        },
        {
          "id": 10,
          "userid": 395,
          "deviceid": 46,
          "sharedkey": 1265136212,
          "sharedid": 776547393
        },
        {
          "id": 9,
          "userid": 426,
          "deviceid": 17,
          "sharedkey": 2104503649,
          "sharedid": 1212305729
        },
        {
          "id": 8,
          "userid": 426,
          "deviceid": 17,
          "sharedkey": 1700100216,
          "sharedid": 1968459342
        },
        {
          "id": 7,
          "userid": 426,
          "deviceid": 17,
          "sharedkey": 1852076144,
          "sharedid": 2002276946
        },
        {
          "id": 6,
          "userid": 426,
          "deviceid": 17,
          "sharedkey": 779255165,
          "sharedid": 557926986
        },
        {
          "id": 5,
          "userid": 426,
          "deviceid": 17,
          "sharedkey": 1363174757,
          "sharedid": 558911568
        },
        {
          "id": 4,
          "userid": 426,
          "deviceid": 17,
          "sharedkey": 1064000090,
          "sharedid": 1143682871
        },
        {
          "id": 3,
          "userid": 426,
          "deviceid": 17,
          "sharedkey": 728448317,
          "sharedid": 1984392300
        },
        {
          "id": 2,
          "userid": 426,
          "deviceid": 2,
          "sharedkey": 1465801049,
          "sharedid": 1397579101
        }
      ]
    }


### Retrieve single CSR Source by id [/api/1/sources/{id}]
+ id (required, number, `12`)
    Will only return the result that matches the rule id if it is supplied.

    {
      "success": true,
      "data": {
        "id": 12,
        "userid": 395,
        "deviceid": 46,
        "sharedkey": 945112124,
        "sharedid": 1631022658
      }
    }

## CSR Rules [/api/1/rules/]


### List CSR Rules [GET]

+ Response 200 (application/json)

    {
      "success": true,
      "data": [
        {
          "id": 5,
          "userid": 426,
          "partnerid": 1,
          "enabled": 1,
          "csrappid": 1,
          "userproperties": "{\"recipients\":\"asdfd@gmail.com\",\"subject\":\"asdf\"}",
          "hidden": 0,
          "tags": [
            "TestB",
            "Test2"
          ]
        },
        {
          "id": 4,
          "userid": 426,
          "partnerid": 1,
          "enabled": 1,
          "csrappid": 1,
          "userproperties": "{\"recipients\":\"asdf@gmail.com\",\"subject\":\"asdf\"}",
          "hidden": 0,
          "tags": [
            "Tag100",
            "Tag2001"
          ]
        }
      ]
    }

### Retrieve single CSR Rule by id [GET]

+ Parameters
  + id (required, number, `5`)
      Will only return the result that matches the rule id if it is supplied.


### Delete CSR Rules [DELETE]

Coming soon!

### Create Rule [POST]

### Update Rule [PUT]
